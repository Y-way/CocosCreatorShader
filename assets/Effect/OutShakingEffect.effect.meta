{
  "ver": "1.0.25",
  "uuid": "33f8e21f-54e9-40ac-ab7c-9cd792ea76f6",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_time;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 v_time;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec4 v_time;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_NOISETEX\nuniform sampler2D noisetex;\n#endif\nuniform vec4 textureTexelSize;\nuniform float lineWidth;\nvoid main () {\n  vec2 uv_temp = v_uv0;\n  vec4 noise = vec4(1, 1, 1, 1);\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 up_uv = v_uv0 + vec2(0,1) * lineWidth * textureTexelSize.xy;\n  vec2 down_uv = v_uv0 + vec2(0,-1) * lineWidth * textureTexelSize.xy;\n  vec2 left_uv = v_uv0 + vec2(-1,0) * lineWidth * textureTexelSize.xy;\n  vec2 right_uv = v_uv0 + vec2(1,0) * lineWidth * textureTexelSize.xy;\n  vec4 up_uv_col = texture2D(texture,up_uv);\n  vec4 down_uv_col = texture2D(texture,down_uv);\n  vec4 left_uv_col = texture2D(texture,left_uv);\n  vec4 right_uv_col = texture2D(texture,right_uv);\n  float w = up_uv_col.a * down_uv_col.a * left_uv_col.a * right_uv_col.a;\n  #if USE_NOISETEX\n  vec4 noisetex_tmp = texture2D(noisetex, v_uv0.xy - v_time.x * 0.5);\n  #if CC_USE_ALPHA_ATLAS_noisetex\n      noisetex_tmp.a *= texture2D(noisetex, v_uv0.xy - v_time.x * 0.5 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    noise.rgb *= (noisetex_tmp.rgb * noisetex_tmp.rgb);\n    noise.a *= noisetex_tmp.a;\n  #else\n    noise *= noisetex_tmp;\n  #endif\n  #endif\n  if(w == 0.0){\n    uv_temp += noise.xy * 0.05;\n  }\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, uv_temp);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv_temp + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec4 v_time;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec4 v_time;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_NOISETEX\nuniform sampler2D noisetex;\n#endif\nuniform Factor {\n    vec4 textureTexelSize;\n    vec4 lineColor;\n    float lineWidth;\n};\nvoid main () {\n  vec2 uv_temp = v_uv0;\n  vec4 noise = vec4(1, 1, 1, 1);\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 up_uv = v_uv0 + vec2(0,1) * lineWidth * textureTexelSize.xy;\n  vec2 down_uv = v_uv0 + vec2(0,-1) * lineWidth * textureTexelSize.xy;\n  vec2 left_uv = v_uv0 + vec2(-1,0) * lineWidth * textureTexelSize.xy;\n  vec2 right_uv = v_uv0 + vec2(1,0) * lineWidth * textureTexelSize.xy;\n  vec4 up_uv_col = texture2D(texture,up_uv);\n  vec4 down_uv_col = texture2D(texture,down_uv);\n  vec4 left_uv_col = texture2D(texture,left_uv);\n  vec4 right_uv_col = texture2D(texture,right_uv);\n  float w = up_uv_col.a * down_uv_col.a * left_uv_col.a * right_uv_col.a;\n  #if USE_NOISETEX\n  vec4 noisetex_tmp = texture(noisetex, v_uv0.xy - v_time.x * 0.5);\n  #if CC_USE_ALPHA_ATLAS_noisetex\n      noisetex_tmp.a *= texture(noisetex, v_uv0.xy - v_time.x * 0.5 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    noise.rgb *= (noisetex_tmp.rgb * noisetex_tmp.rgb);\n    noise.a *= noisetex_tmp.a;\n  #else\n    noise *= noisetex_tmp;\n  #endif\n  #endif\n  if(w == 0.0){\n    uv_temp += noise.xy * 0.05;\n  }\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, uv_temp);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv_temp + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}